rules_version = '2';
service cloud.firestore {
  
  match /databases/{database}/documents {
  	// ---------- HELPER FUNCTIONS ---------- //

  	// Check if the authenticated user is a Corporate Admin user
  	function corporateUser() {
  		return "CORPORATE" in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles;
  	}

    // Prevent user from editing "roles" field
    function validEditUser() {
        return !(request.resource.data.keys().hasAll(["roles"]));
    }
  	
    function isAdmin(){
    	return get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == "admin"
    }

    function isFranchisee(){
    	return get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == "franchisee"
    }
    
    // ---------- RULES STARTS HERE ---------- //
    
    match /admins/{admins} {
        allow create, read: if request.auth.uid != null;
        allow write: if request.resource.data.role == "admin" || request.resource.data.role == "franchisee"
    }
    
    match /teachers/{teacher} {
      allow read, write: if request.auth.uid != null;
    }

    match /users/{user} {
    	allow read: if request.auth.uid == user;
      allow create, update: if corporateUser() || validEditUser();

      match /templates/{template} {
      	allow read: if request.auth.uid == user || resource.data.isPublic == true;
        allow write: if request.auth.uid == user || corporateUser();
      }
    }
    
    match /cogs/{cogs} {
      allow read, create: if request.auth.uid != null;
    	allow update, delete: if request.auth.uid == resource.data.authorId || corporateUser();
    }
    
    match /modules/{module} {
      allow read, create: if request.auth.uid != null;
      allow update, delete: if request.auth.uid == resource.data.authorId || corporateUser();
    }

    match /redeem_codes/{redeem} {
      allow read, write: if request.auth.uid != null;
    }
  }
}
